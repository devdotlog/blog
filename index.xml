<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My Blog</title><link>https://sh0seo.github.io/</link><description>Recent content on My Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>sh0seo</copyright><lastBuildDate>Thu, 03 Sep 2020 14:35:00 +0900</lastBuildDate><atom:link href="https://sh0seo.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Github Action을 이용한 빌드 &amp; 실행에서 패스워드 숨기기</title><link>https://sh0seo.github.io/posts/2020-09-03-password-in-github-action/</link><pubDate>Thu, 03 Sep 2020 14:35:00 +0900</pubDate><guid>https://sh0seo.github.io/posts/2020-09-03-password-in-github-action/</guid><description>Github Actions? Github에는 Actions라는 기능이 있습니다. Travis CI 처럼 소스코드를 이용해서 build, test, deploy 등의 기능을 수행할 수 있는 서비스입니다.
Github Actions을 이용하면 hugo blog 빌드 &amp;amp; 배포, cron을 이용한 반복적인 업무 자동화도 할 수 있습니다.
Github Actions을 이용해서 DB 데이터 업데이트하기 만약에 일주일에 한번씩 DB를 업데이트 해야하는 일이 있다고 가정합니다.
사용하는 DB용 클라이언트를 실행 login/password로 로그인 업데이트 query를 수행하기 위한 데이터 확인 Query를 실행 잊지 않고 정해진 요일에 반복 수행 아마도 개발자는 위와 같은 단계를 반복적으로 수행하게 됩니다.</description></item><item><title>Text normalization in Go</title><link>https://sh0seo.github.io/posts/2020-09-01-text-normalization-in-go/</link><pubDate>Tue, 01 Sep 2020 04:15:00 +0900</pubDate><guid>https://sh0seo.github.io/posts/2020-09-01-text-normalization-in-go/</guid><description>나만 몰랐던 유니코드 정규화 아래와 같이 특수 문자가 섞여 있는 문자열이 있습니다.
&amp;quot;São Paulo, Brazil. Wien, Österreich.&amp;quot;
이런 문자열을 아래와 같이 알파벳으로 변경하고 싶다면 어떻게 해야 할까요?
&amp;quot;Sao Paulo, Brazil. Wien, Osterreich.&amp;quot;
고민 없이 쉽게 할 수 있는 방법은 대상 문자를 찾아서 원하는 문자로 치환하는 방법입니다. 치환해야 할 문자 종류가 많지 않다면, 간단하게 적용할 수 있는 방법입니다.
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;strings&amp;quot; ) func main() { data := &amp;quot;São Paulo, Brazil.</description></item><item><title>Hello World</title><link>https://sh0seo.github.io/posts/2020-08-05-hello-world/</link><pubDate>Wed, 05 Aug 2020 16:37:45 +0900</pubDate><guid>https://sh0seo.github.io/posts/2020-08-05-hello-world/</guid><description>Hello World! Hugo를 이용한 Static Blog testing.
comment는 일단 disques
여기 아래에 utterence가 나와야 하는데&amp;hellip; 되나??
잘나오네 Good.
그런데 누가 댓글쓰지도 않는거 달아서 뭐하나&amp;hellip; ㅎ;;</description></item><item><title>About</title><link>https://sh0seo.github.io/about/</link><pubDate>Wed, 05 Aug 2020 16:05:02 +0900</pubDate><guid>https://sh0seo.github.io/about/</guid><description>나는 누구인가? 프로그래 언어로 console 화면에 Hello World! 찍는 직업을 갖는 사람 회사에서는 spring boot를 이용한 backend 개발로 먹고 사는 사람 golang에 관심을 갖고 있는 사람(stackoverflow에 go로 1000점 언제찍냐;;)</description></item><item><title>Flutter로 개발한 Web App을 Release 모드로 테스트하기</title><link>https://sh0seo.github.io/posts/2020-09-09-release-web-app-in-flutter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sh0seo.github.io/posts/2020-09-09-release-web-app-in-flutter/</guid><description>Flutter로 개발한 Web App을 Release 모드로 테스트하기 Flutter를 이용하여 Web App을 개발했다면, 서버에 Deploy 하기 전에 Release 상태로 테스트를 진행해야 합니다.
테스트는 아래와 같은 순서로 진행합니다.
Web App을 Release 모드로 build Web Server 실행 테스트 Release 모드로 build 대상 프로젝트로 이동하고 command 라인에서 다음 명령을 실행하여 빌드합니다.
&amp;gt; flutter build web 정상적으로 빌드가 되었다면 프로젝트 폴더 내에 프로젝트폴더/build/web 디렉토리에 index.html 파일을 포함한 release 파일들이 생성된 것을 확인할 수 있습니다.</description></item></channel></rss>